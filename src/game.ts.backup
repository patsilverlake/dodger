// src/game.ts

// --- Interfaces & Types ---
interface GameObject {
    x: number;
    y: number;
    width: number;
    height: number;
    image: HTMLImageElement | null;
}

interface Player extends GameObject {
    speed: number;
    dx: number;
}

interface Obstacle extends GameObject {
    speed: number;
    type: 'bear' | 'crocodile' | 'snake'; // Updated obstacle types
}

interface Tile {
    x: number;
    y: number;
    width: number;
    height: number;
    image: HTMLImageElement;
}

// --- Asset Paths ---
const RABBIT_SRC = 'assets/rabbit.png';
const BEAR_SRC = 'assets/bear.png';
const CROCODILE_SRC = 'assets/crocodile.png';
const SNAKE_SRC = 'assets/snake.png';
// Tile assets
const TILE_SRCS = [
    'assets/tile_0000.png',
    'assets/tile_0001.png', 
    'assets/tile_0002.png',
    'assets/tile_0003.png',
    'assets/tile_0004.png',
    'assets/tile_0005.png'
];

// --- Game Constants ---
const CANVAS_WIDTH = 600;
const CANVAS_HEIGHT = 400;
const PLAYER_WIDTH = 50;
const PLAYER_HEIGHT = 50;
const PLAYER_SPEED = 7;
const OBSTACLE_BASE_WIDTH = 50;
const OBSTACLE_BASE_HEIGHT = 50;
const OBSTACLE_MIN_SPEED = 2;
const OBSTACLE_MAX_SPEED = 6;
const OBSTACLE_SPAWN_RATE = 0.025;
const TILE_SIZE = 40; // Size of each background tile

// --- Image Assets ---
let rabbitImage: HTMLImageElement;
let bearImage: HTMLImageElement;
let crocodileImage: HTMLImageElement;
let snakeImage: HTMLImageElement;
let tileImages: HTMLImageElement[] = [];
let imagesLoaded = 0;
const TOTAL_IMAGES = 10; // 4 characters + 6 tiles

// --- Game State ---
let canvas: HTMLCanvasElement;
let ctx: CanvasRenderingContext2D;
let player: Player;
let obstacles: Obstacle[] = [];
let backgroundTiles: Tile[] = [];
let score = 0;
let isGameOver = false;
let isGameRunning = false;
let animationFrameId: number | null = null;

// --- UI Elements ---
let scoreDisplay: HTMLElement;
let gameOverDisplay: HTMLElement;
let finalScoreDisplay: HTMLElement;
let startButton: HTMLButtonElement;
let restartButton: HTMLButtonElement;
let loadingIndicator: HTMLElement | null = null;

// --- Image Loading ---
function loadImage(src: string, onError: () => void): HTMLImageElement {
    const img = new Image();
    img.onload = () => {
        imagesLoaded++;
        console.log(`Loaded: ${src} (${imagesLoaded}/${TOTAL_IMAGES})`);
        if (imagesLoaded === TOTAL_IMAGES) {
            console.log("All images loaded.");
            if (loadingIndicator) loadingIndicator.classList.add('hidden');
            startButton.disabled = false;
            startButton.textContent = "Start Game";
            generateBackgroundTiles();
            drawInitialMessage();
        }
    };
    img.onerror = () => {
        console.error(`Failed to load image: ${src}`);
        onError();
        if (loadingIndicator) {
            loadingIndicator.textContent = `Error loading ${src}. Cannot start.`;
            loadingIndicator.style.color = 'red';
        }
        startButton.disabled = true;
    };
    img.src = src;
    return img;
}

function handleImageLoadError() {
    startButton.disabled = true;
    startButton.textContent = "Loading Error";
    console.error("Essential image failed to load. Cannot start game.");
}

function generateBackgroundTiles() {
    backgroundTiles = [];
    
    // Calculate how many tiles we need to cover the canvas
    const tilesX = Math.ceil(CANVAS_WIDTH / TILE_SIZE);
    const tilesY = Math.ceil(CANVAS_HEIGHT / TILE_SIZE);
    
    for (let y = 0; y < tilesY; y++) {
        for (let x = 0; x < tilesX; x++) {
            // Randomly select a tile image
            const randomTileIndex = Math.floor(Math.random() * tileImages.length);
            
            backgroundTiles.push({
                x: x * TILE_SIZE,
                y: y * TILE_SIZE,
                width: TILE_SIZE,
                height: TILE_SIZE,
                image: tileImages[randomTileIndex]
            });
        }
    }
}

function drawInitialMessage() {
    // Draw the background tiles first
    drawBackground();
    
    // Then draw the message on top
    ctx.font = "24px sans-serif";
    ctx.fillStyle = "#333";
    ctx.textAlign = "center";
    ctx.fillText("Images Loaded. Press Start!", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 - 20);
}

function drawBackground() {
    // Draw all background tiles
    backgroundTiles.forEach(tile => {
        ctx.drawImage(tile.image, tile.x, tile.y, tile.width, tile.height);
    });
}

// --- Initialization ---
function init() {
    canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
    const context = canvas.getContext('2d');
    if (!context) {
        throw new Error("Could not get 2D rendering context");
    }
    ctx = context;

    canvas.width = CANVAS_WIDTH;
    canvas.height = CANVAS_HEIGHT;

    scoreDisplay = document.getElementById('scoreDisplay')!;
    gameOverDisplay = document.getElementById('gameOver')!;
    finalScoreDisplay = document.getElementById('finalScore')!;
    startButton = document.getElementById('startButton') as HTMLButtonElement;
    restartButton = document.getElementById('restartButton') as HTMLButtonElement;

    // Disable start button until images are loaded
    startButton.disabled = true;
    startButton.textContent = "Loading Assets...";

    // Load character images
    rabbitImage = loadImage(RABBIT_SRC, handleImageLoadError);
    bearImage = loadImage(BEAR_SRC, handleImageLoadError);
    crocodileImage = loadImage(CROCODILE_SRC, handleImageLoadError);
    snakeImage = loadImage(SNAKE_SRC, handleImageLoadError);
    
    // Load tile images
    for (const tileSrc of TILE_SRCS) {
        const tileImg = loadImage(tileSrc, handleImageLoadError);
        tileImages.push(tileImg);
    }

    // Add event listeners
    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);
    startButton.addEventListener('click', startGame);
    restartButton.addEventListener('click', startGame);

    // Show start button initially (but disabled), hide others
    startButton.classList.remove('hidden');
    gameOverDisplay.classList.add('hidden');
    restartButton.classList.add('hidden');

    // Draw initial loading state
    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
    ctx.fillStyle = '#ccc';
    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
    ctx.font = "20px sans-serif";
    ctx.fillStyle = "#555";
    ctx.textAlign = "center";
    ctx.fillText("Loading assets...", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);
}

// --- Game Start/Reset ---
function startGame() {
    // Prevent starting if images not loaded or already running
    if (imagesLoaded !== TOTAL_IMAGES || isGameRunning) return;

    console.log("Starting game...");
    isGameRunning = true;
    score = 0;
    obstacles = [];
    isGameOver = false;

    player = {
        x: CANVAS_WIDTH / 2 - PLAYER_WIDTH / 2,
        y: CANVAS_HEIGHT - PLAYER_HEIGHT - 10,
        width: PLAYER_WIDTH,
        height: PLAYER_HEIGHT,
        speed: PLAYER_SPEED,
        dx: 0,
        image: rabbitImage
    };

    scoreDisplay.textContent = score.toString();
    gameOverDisplay.classList.add('hidden');
    startButton.classList.add('hidden');
    restartButton.classList.add('hidden');

    if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
    }

    gameLoop();
}

// --- Input Handling ---
function handleKeyDown(e: KeyboardEvent) {
    if (!isGameRunning || isGameOver) return;

    if (e.key === 'ArrowLeft' || e.key === 'a') {
        player.dx = -1;
    } else if (e.key === 'ArrowRight' || e.key === 'd') {
        player.dx = 1;
    }
}

function handleKeyUp(e: KeyboardEvent) {
    if (!isGameRunning || isGameOver) return;

    if (
        (e.key === 'ArrowLeft' || e.key === 'a') && player.dx === -1 ||
        (e.key === 'ArrowRight' || e.key === 'd') && player.dx === 1
    ) {
        player.dx = 0;
    }
}

// --- Player Logic ---
function updatePlayer() {
    if (!player) return;
    player.x += player.dx * player.speed;

    if (player.x < 0) {
        player.x = 0;
    } else if (player.x + player.width > CANVAS_WIDTH) {
        player.x = CANVAS_WIDTH - player.width;
    }
}

function drawPlayer() {
    if (!player || !player.image) return;
    ctx.drawImage(player.image, player.x, player.y, player.width, player.height);
}

// --- Obstacle Logic ---
function spawnObstacle() {
    if (Math.random() < OBSTACLE_SPAWN_RATE) {
        const x = Math.random() * (CANVAS_WIDTH - OBSTACLE_BASE_WIDTH);
        const speed = OBSTACLE_MIN_SPEED + Math.random() * (OBSTACLE_MAX_SPEED - OBSTACLE_MIN_SPEED);
        
        // Randomly select which enemy to spawn
        const randomValue = Math.random();
        let obstacleType: 'bear' | 'crocodile' | 'snake';
        let image: HTMLImageElement;
        let width = OBSTACLE_BASE_WIDTH;
        let height = OBSTACLE_BASE_HEIGHT;
        
        if (randomValue < 0.33) {
            obstacleType = 'bear';
            image = bearImage;
            width *= 1.1; // Bears are slightly larger
            height *= 1.1;
        } else if (randomValue < 0.66) {
            obstacleType = 'crocodile';
            image = crocodileImage;
            width *= 1.2; // Crocodiles are larger
            height *= 0.9; // but a bit flatter
        } else {
            obstacleType = 'snake';
            image = snakeImage;
            width *= 0.9; // Snakes are smaller
            height *= 0.8;
        }

        obstacles.push({
            x: x,
            y: -height,
            width: width,
            height: height,
            speed: speed,
            image: image,
            type: obstacleType
        });
    }
}

function updateObstacles() {
    let scoreIncrement = 0;
    obstacles = obstacles.filter(obstacle => {
        obstacle.y += obstacle.speed;
        if (obstacle.y >= CANVAS_HEIGHT) {
            scoreIncrement++;
            return false; // Remove obstacle that passed
        }
        return true; // Keep obstacle on screen
    });

    if (scoreIncrement > 0) {
        score += scoreIncrement;
        scoreDisplay.textContent = score.toString();
    }
}

function drawObstacles() {
    obstacles.forEach(obstacle => {
        if (obstacle.image) {
            ctx.drawImage(obstacle.image, obstacle.x, obstacle.y, obstacle.width, obstacle.height);
        } else {
            // Fallback drawing if image failed
            ctx.fillStyle = '#ff0000';
            ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
        }
    });
}

// --- Collision Detection ---
function checkCollisions() {
    if (!player) return;
    obstacles.forEach(obstacle => {
        // AABB collision check
        if (
            player.x < obstacle.x + obstacle.width &&
            player.x + player.width > obstacle.x &&
            player.y < obstacle.y + obstacle.height &&
            player.y + player.height > obstacle.y
        ) {
            endGame();
        }
    });
}

// --- Game Over ---
function endGame() {
    if (isGameOver) return;

    console.log("Game Over!");
    isGameOver = true;
    isGameRunning = false;

    if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
        animationFrameId = null;
    }

    finalScoreDisplay.textContent = score.toString();
    gameOverDisplay.classList.remove('hidden');
    restartButton.classList.remove('hidden');
}

// --- Game Loop ---
function gameLoop() {
    if (isGameOver || !isGameRunning) return;

    // Draw the tiled background
    drawBackground();

    // Spawn new obstacles
    spawnObstacle();

    // Update positions
    updatePlayer();
    updateObstacles();

    // Check for collisions
    checkCollisions();

    // Draw everything
    drawPlayer();
    drawObstacles();

    // Request next frame
    animationFrameId = requestAnimationFrame(gameLoop);
}

// --- Run Initialization ---
document.addEventListener('DOMContentLoaded', init);
